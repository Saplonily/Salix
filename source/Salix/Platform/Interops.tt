<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Runtime" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System.Runtime.InteropServices;

#pragma warning disable SYSLIB1054

namespace Saladim.Salix;

unsafe partial class Interop
{
<#
/* api_system */
AddMethod("NBool SLX_Initialize()");
AddMethod("long SLX_GetUsecTimeline()");

/* api_render_context */
AddMethod("IntPtr SLX_CreateRenderContext()");
AddMethod("NBool SLX_AttachRenderContext(IntPtr win, IntPtr hrc)");
AddMethod("void SLX_SwapBuffers(IntPtr win)");
AddMethod("void SLX_SetVSyncEnabled(NBool enable)");
AddMethod("double SLX_GetVSyncFrameTime()");

/* api_graphics */
AddMethod("NBool SLX_QueryRenderContextInfo(out RenderContextInfo info)");
AddMethod("NBool SLX_Viewport(int x, int y, int width, int height)");
AddMethod("NBool SLX_Clear(float r, float g, float b, float a)");
AddMethod("IntPtr SLX_RegisterVertexType(VertexElementType* vdecl, int len)");
AddMethod("IntPtr SLX_CreateVertexBuffer(IntPtr vertexType, NBool indexed)");
AddMethod("NBool SLX_DeleteVertexBuffer(IntPtr bufferHandle)");
AddMethod("NBool SLX_DrawPrimitives(IntPtr vertexType, PrimitiveType ptype, void* data, int dataSize, int verticesCount)");
AddMethod("NBool SLX_SetVertexBufferData(IntPtr vertexBuffer, void* data, int dataSize, VertexBufferDataUsage dataUsage)");
AddMethod("NBool SLX_SetIndexBufferData(IntPtr vertexBuffer, void* data, int dataSize, VertexBufferDataUsage dataUsage)");
AddMethod("NBool SLX_DrawBufferPrimitives(IntPtr bufferHandle, PrimitiveType primitiveType, int verticesCount)");
AddMethod("NBool SLX_DrawIndexedBufferPrimitives(IntPtr bufferHandle, PrimitiveType primitiveType, int verticesCount)");
AddMethod("IntPtr SLX_CreateTexture(int width, int height)");
AddMethod("NBool SLX_DeleteTexture(IntPtr texHandle)");
AddMethod("NBool SLX_SetTextureData(IntPtr texHandle, int width, int height, void* data, ImageFormat format)");
AddMethod("NBool SLX_SetTexture(int index, IntPtr texHandle)");
// TODO move to sampler
AddMethod("NBool SLX_SetTextureFilter(IntPtr texHandle, TextureFilterType min, TextureFilterType max)");
AddMethod("NBool SLX_SetTextureWrap(IntPtr texHandle, TextureWrapType wrap)");
AddMethod("IntPtr SLX_CreateSampler(TextureFilterType filter, TextureWrapType wrap)");
AddMethod("NBool SLX_DeleteSampler(IntPtr samplerHandle)");
AddMethod("NBool SLX_SetSampler(int index, IntPtr samplerHandle)");
AddMethod("IntPtr SLX_CreateShaderFromGlsl(byte* vertSource, byte* fragSource)");
AddMethod("NBool SLX_DeleteShader(IntPtr shaderHandle)");
AddMethod("NBool SLX_SetShader(IntPtr shaderHandle)");
AddMethod("IntPtr SLX_CreateRenderTarget(IntPtr texHandle)");
AddMethod("NBool SLX_DeleteRenderTarget(IntPtr renderTargetHandle)");
AddMethod("NBool SLX_SetRenderTarget(IntPtr renderTargetHandle)");

/* api_graphics ShaderParam */
AddMethod("int SLX_GetShaderParamLocation(IntPtr shaderHandle, byte* nameUtf8)");
CondBegin("NETSTANDARD2_1_OR_GREATER || NET5_0_OR_GREATER");
AddMethod("int SLX_GetShaderParamLocation(IntPtr shaderHandle, [MarshalAs(UnmanagedType.LPUTF8Str)] string name)");
CondEnd();
AddMethod("NBool SLX_SetShaderParamInt(IntPtr shaderHandle, int location, int value)");
AddMethod("NBool SLX_SetShaderParamFloat(IntPtr shaderHandle, int location, float value)");
AddMethod("NBool SLX_SetShaderParamVec4(IntPtr shaderHandle, int location, float* value)");
AddMethod("NBool SLX_SetShaderParamMat4(IntPtr shaderHandle, int location, float* value)");
AddMethod("NBool SLX_SetShaderParamMat3x2(IntPtr shaderHandle, int location, float* value)");

/* api_windowing */
AddMethod("IntPtr SLX_CreateWindow(int width, int height, char* title, IntPtr gcHandle)");
AddMethod("void SLX_DestroyWindow(IntPtr win)");
AddMethod("void SLX_PollEvents(IntPtr win)");
AddMethod("void* SLX_BeginProcessEvents(IntPtr win, out nint count, out void* events)");
AddMethod("void SLX_EndProcessEvents(IntPtr win, void* ehandle)");
AddMethod("void SLX_ShowWindow(IntPtr win)");
AddMethod("void SLX_HideWindow(IntPtr win)");
AddMethod("void SLX_GetWindowRect(IntPtr win, out RECT rect)");
AddMethod("void SLX_SetWindowSize(IntPtr win, int width, int height)");
AddMethod("void SLX_SetWindowPos(IntPtr win, int x, int y)");
AddMethod("void SLX_SetWindowTitle(IntPtr win, char* title)");
AddMethod("int SLX_GetWindowTitle(IntPtr win, char* title)");

/* api_error */
CondBegin("NET5_0_OR_GREATER");
ExtAttr("[SuppressGCTransition]"); // this method is called very frequently
CondEnd();
AddMethod("ErrorCode SLX_GetError()");

/* api_resource_loading */
AddMethod("void* SLX_LoadImage(void* memory, int length, out int width, out int height, out int dataLength, out ImageFormat textureFormat)");
AddMethod("void SLX_FreeImage(void* texData)");
#>
}
<#+

void AddMethod(string sig)
{
	WriteLine("\t[DllImport(LibName, CallingConvention = CallConv, ExactSpelling = true)]");
	WriteLine($"\tinternal static extern {sig};");
}

void ExtAttr(string extAttr) 
	=> WriteLine($"\t{extAttr}");

void CondBegin(string cond)
	=> WriteLine($"#if {cond}");

void CondEnd() 
	=> WriteLine($"#endif");

#>